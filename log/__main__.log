output shape & no of examples(6, 2)
count(1, 1)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [3, 1]
new obj position(0.5, 0.5)
Arm 1: Mean=0.0139, Std=0.0080 -> Score=0.0146
count(1, 2)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 6 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 1: Mean=0.0278, Std=0.0074 -> Score=0.0256
count(1, 3)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 0 0 0 0 0]
 [0 0 6 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 3]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
Arm 1: Mean=0.0394, Std=0.0072 -> Score=0.0276
count(0, 4)
input grid: [[7 9]
 [4 3]]
target grid: [[7 9 7 9 7 9]
 [4 3 4 3 4 3]
 [9 7 9 7 9 7]
 [3 4 3 4 3 4]
 [7 9 7 9 7 9]
 [4 3 4 3 4 3]]
'predicted_grid',[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0115
Arm 1: Mean=0.0394, Std=0.0072 -> Score=0.0414
count(1, 5)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 0 6 0 0 0]
 [0 0 6 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(0.5, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0134
Arm 1: Mean=0.0521, Std=0.0080 -> Score=0.0467
count(1, 6)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 0 6 0 0 0]
 [0 0 6 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.5, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0058
Arm 1: Mean=0.0569, Std=0.0068 -> Score=0.0658
count(1, 7)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 0 6 0 0 0]
 [0 0 0 6 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 2]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0004
Arm 1: Mean=0.0579, Std=0.0058 -> Score=0.0662
count(1, 8)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 0 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0150
Arm 1: Mean=0.0625, Std=0.0055 -> Score=0.0686
count(1, 9)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 2]
new obj position(0.0, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0011
Arm 1: Mean=0.0660, Std=0.0051 -> Score=0.0656
count(1, 10)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [0, 5]
new obj position(0.0, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0051
Arm 1: Mean=0.0687, Std=0.0048 -> Score=0.0740
count(1, 11)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0075
Arm 1: Mean=0.0708, Std=0.0044 -> Score=0.0674
count(1, 12)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 5]
new obj position(1.0, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0050
Arm 1: Mean=0.0726, Std=0.0042 -> Score=0.0795
count(1, 13)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 3]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0109
Arm 1: Mean=0.0764, Std=0.0043 -> Score=0.0769
count(1, 14)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.5, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [5, 4]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [0, 5]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0031
Arm 1: Mean=0.0791, Std=0.0041 -> Score=0.0799
count(1, 15)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.5, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [1, 5]
new obj position(0.16666666666666666, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0148
Arm 1: Mean=0.0813, Std=0.0040 -> Score=0.0818
count(1, 16)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.6666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(-0.16666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0070
Arm 1: Mean=0.0838, Std=0.0039 -> Score=0.0835
count(1, 17)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 0]
 [6 6 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [0, 4]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0106
Arm 1: Mean=0.0855, Std=0.0038 -> Score=0.0835
count(1, 18)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 0]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [4, 2]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0029
Arm 1: Mean=0.0874, Std=0.0037 -> Score=0.0932
count(1, 19)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 0]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 3]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [0, 4]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0034
Arm 1: Mean=0.0895, Std=0.0037 -> Score=0.0880
count(1, 20)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 0]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.0, 0.5)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 1.0)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 1.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0006
Arm 1: Mean=0.0928, Std=0.0038 -> Score=0.0931
count(1, 21)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 0 6]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.5, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0020
Arm 1: Mean=0.0965, Std=0.0041 -> Score=0.0975
count(1, 22)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0130
Arm 1: Mean=0.1002, Std=0.0043 -> Score=0.0899
count(1, 23)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [0 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 3]
new obj position(0.16666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.0, 0.5)
target_shape: (6, 6) , new pos_values: [3, 1]
new obj position(0.5, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0109
Arm 1: Mean=0.1032, Std=0.0044 -> Score=0.1019
count(1, 24)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [0, 3]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.0, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0081
Arm 1: Mean=0.1063, Std=0.0044 -> Score=0.1145
count(1, 25)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 3]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 1.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0086
Arm 1: Mean=0.1088, Std=0.0044 -> Score=0.1166
count(1, 26)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 1.0)
target_shape: (6, 6) , new pos_values: [3, 0]
new obj position(0.5, 0.0)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.0, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.6666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0079
Arm 1: Mean=0.1111, Std=0.0044 -> Score=0.1099
count(1, 27)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.8333333333333334, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0007
Arm 1: Mean=0.1132, Std=0.0044 -> Score=0.1169
count(1, 28)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 0 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 2]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.6666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0058
Arm 1: Mean=0.1155, Std=0.0043 -> Score=0.1113
count(1, 29)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 5]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0042
Arm 1: Mean=0.1183, Std=0.0044 -> Score=0.1160
count(1, 30)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0144
Arm 1: Mean=0.1212, Std=0.0045 -> Score=0.1249
count(1, 31)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0124
Arm 1: Mean=0.1238, Std=0.0045 -> Score=0.1231
count(1, 32)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0027
Arm 1: Mean=0.1266, Std=0.0046 -> Score=0.1234
count(1, 33)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0000
Arm 1: Mean=0.1287, Std=0.0046 -> Score=0.1216
count(1, 34)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 0 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.0, 0.5)
target_shape: (6, 6) , new pos_values: [3, 0]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.0, 0.5)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.5, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0120
Arm 1: Mean=0.1309, Std=0.0046 -> Score=0.1297
count(1, 35)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(1.0, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0081
Arm 1: Mean=0.1340, Std=0.0047 -> Score=0.1298
count(1, 36)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 5]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0152
Arm 1: Mean=0.1367, Std=0.0048 -> Score=0.1312
count(1, 37)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [4, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0092
Arm 1: Mean=0.1387, Std=0.0047 -> Score=0.1483
count(1, 38)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [8 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.5, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0134
Arm 1: Mean=0.1406, Std=0.0047 -> Score=0.1346
count(1, 39)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 5]
new obj position(0.0, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [5, 4]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 3]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0046
Arm 1: Mean=0.1429, Std=0.0047 -> Score=0.1455
count(1, 40)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 8 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0164
Arm 1: Mean=0.1448, Std=0.0047 -> Score=0.1466
count(1, 41)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 6 6 0 0 0]
 [4 0 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [0, 5]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.5, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0078
Arm 1: Mean=0.1470, Std=0.0047 -> Score=0.1530
count(1, 42)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [1, 5]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0101
Arm 1: Mean=0.1492, Std=0.0047 -> Score=0.1459
count(1, 43)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [3, 0]
new obj position(0.0, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0027
Arm 1: Mean=0.1511, Std=0.0047 -> Score=0.1575
count(1, 44)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 4]
new obj position(0.0, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0002
Arm 1: Mean=0.1526, Std=0.0047 -> Score=0.1559
count(1, 45)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [0 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0018
Arm 1: Mean=0.1540, Std=0.0046 -> Score=0.1507
count(1, 46)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [3, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0095
Arm 1: Mean=0.1554, Std=0.0046 -> Score=0.1539
count(1, 47)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.6666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0052
Arm 1: Mean=0.1569, Std=0.0045 -> Score=0.1584
count(1, 48)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[4 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0113
Arm 1: Mean=0.1585, Std=0.0045 -> Score=0.1608
count(1, 49)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 0 6 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, -0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.8333333333333334, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0014
Arm 1: Mean=0.1606, Std=0.0045 -> Score=0.1697
count(1, 50)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0060
Arm 1: Mean=0.1628, Std=0.0046 -> Score=0.1675
count(1, 51)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0204
Arm 1: Mean=0.1647, Std=0.0046 -> Score=0.1609
count(1, 52)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 6 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.6666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0078
Arm 1: Mean=0.1671, Std=0.0047 -> Score=0.1635
count(1, 53)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 0 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0087
Arm 1: Mean=0.1697, Std=0.0047 -> Score=0.1785
count(1, 54)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 0 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0011
Arm 1: Mean=0.1722, Std=0.0048 -> Score=0.1660
count(1, 55)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.5, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0100
Arm 1: Mean=0.1746, Std=0.0049 -> Score=0.1765
count(1, 56)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.0, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0006
Arm 1: Mean=0.1771, Std=0.0050 -> Score=0.1846
count(1, 57)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 0 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0030
Arm 1: Mean=0.1794, Std=0.0050 -> Score=0.1708
count(1, 58)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0054
Arm 1: Mean=0.1817, Std=0.0050 -> Score=0.1806
count(1, 59)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.0, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0237
Arm 1: Mean=0.1835, Std=0.0050 -> Score=0.1827
count(1, 60)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0111
Arm 1: Mean=0.1851, Std=0.0050 -> Score=0.1878
count(1, 61)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 0 0 0 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.5, 0.0)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0178
Arm 1: Mean=0.1863, Std=0.0050 -> Score=0.1817
count(1, 62)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [0 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0102
Arm 1: Mean=0.1877, Std=0.0049 -> Score=0.1775
count(1, 63)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [0 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 4]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0025
Arm 1: Mean=0.1894, Std=0.0049 -> Score=0.1918
count(1, 64)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 0 0 0 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0033
Arm 1: Mean=0.1911, Std=0.0049 -> Score=0.1906
count(1, 65)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.5, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0151
Arm 1: Mean=0.1927, Std=0.0049 -> Score=0.2030
count(1, 66)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 1]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0034
Arm 1: Mean=0.1941, Std=0.0049 -> Score=0.1922
count(1, 67)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 6 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0055
Arm 1: Mean=0.1954, Std=0.0049 -> Score=0.1905
count(1, 68)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 0]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0181
Arm 1: Mean=0.1965, Std=0.0048 -> Score=0.1932
count(1, 69)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0069
Arm 1: Mean=0.1975, Std=0.0048 -> Score=0.2014
count(1, 70)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, -0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [0, 3]
new obj position(0.5, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0097
Arm 1: Mean=0.1987, Std=0.0047 -> Score=0.1908
count(1, 71)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0097
Arm 1: Mean=0.1998, Std=0.0047 -> Score=0.2018
count(1, 72)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 0 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 2]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0187
Arm 1: Mean=0.2010, Std=0.0047 -> Score=0.1986
count(1, 73)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 0 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [4, 3]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [3, 1]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0053
Arm 1: Mean=0.2024, Std=0.0047 -> Score=0.2074
count(1, 74)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0054
Arm 1: Mean=0.2039, Std=0.0047 -> Score=0.2033
count(1, 75)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 5]
new obj position(0.0, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0037
Arm 1: Mean=0.2052, Std=0.0047 -> Score=0.2053
count(1, 76)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0097
Arm 1: Mean=0.2064, Std=0.0046 -> Score=0.2007
count(1, 77)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [5, 3]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0051
Arm 1: Mean=0.2077, Std=0.0046 -> Score=0.1996
count(1, 78)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [0, 2]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.16666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0091
Arm 1: Mean=0.2090, Std=0.0046 -> Score=0.2074
count(1, 79)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0018
Arm 1: Mean=0.2102, Std=0.0046 -> Score=0.2194
count(1, 80)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 8 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.8333333333333334, 0.8333333333333334)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0102
Arm 1: Mean=0.2113, Std=0.0046 -> Score=0.2057
count(1, 81)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0073
Arm 1: Mean=0.2122, Std=0.0045 -> Score=0.2136
count(1, 82)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0292
Arm 1: Mean=0.2129, Std=0.0045 -> Score=0.2070
count(1, 83)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 3]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0178
Arm 1: Mean=0.2138, Std=0.0045 -> Score=0.2130
count(1, 84)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 4 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [3, 4]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.0, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 4]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0033
Arm 1: Mean=0.2144, Std=0.0044 -> Score=0.2163
count(1, 85)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 2]
new obj position(0.0, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0149
Arm 1: Mean=0.2149, Std=0.0044 -> Score=0.2107
count(1, 86)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [0, 4]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [4, 3]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.5)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0095
Arm 1: Mean=0.2153, Std=0.0043 -> Score=0.2116
count(1, 87)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [4 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.8333333333333334, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0031
Arm 1: Mean=0.2158, Std=0.0043 -> Score=0.2131
count(1, 88)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [4 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 0]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 5]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [1, 0]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0047
Arm 1: Mean=0.2165, Std=0.0042 -> Score=0.2193
count(1, 89)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [4 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.5, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0026
Arm 1: Mean=0.2173, Std=0.0042 -> Score=0.2169
count(1, 90)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [4 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 0]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0082
Arm 1: Mean=0.2179, Std=0.0042 -> Score=0.2128
count(1, 91)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [4 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 3]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 5]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0018
Arm 1: Mean=0.2186, Std=0.0041 -> Score=0.2160
count(1, 92)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [4 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.16666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0080
Arm 1: Mean=0.2193, Std=0.0041 -> Score=0.2191
count(1, 93)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0037
Arm 1: Mean=0.2203, Std=0.0041 -> Score=0.2169
count(1, 94)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 4]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.0, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0040
Arm 1: Mean=0.2212, Std=0.0041 -> Score=0.2131
count(1, 95)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[8 8 0 6 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 3]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 3]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 3]
new obj position(0.0, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0177
Arm 1: Mean=0.2221, Std=0.0041 -> Score=0.2225
count(1, 96)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 8 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0087
Arm 1: Mean=0.2226, Std=0.0040 -> Score=0.2279
count(1, 97)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.6666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [3, 4]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0051
Arm 1: Mean=0.2232, Std=0.0040 -> Score=0.2297
count(1, 98)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [5, 0]
new obj position(0.0, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [0, 4]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0071
Arm 1: Mean=0.2238, Std=0.0040 -> Score=0.2198
count(1, 99)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [0, 4]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [3, 0]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.8333333333333334, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0120
Arm 1: Mean=0.2244, Std=0.0039 -> Score=0.2226
count(1, 100)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.5)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.16666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0007
Arm 1: Mean=0.2250, Std=0.0039 -> Score=0.2230
count(1, 101)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [3, 3]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0091
Arm 1: Mean=0.2256, Std=0.0039 -> Score=0.2231
count(1, 102)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.8333333333333334, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.5, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0077
Arm 1: Mean=0.2261, Std=0.0039 -> Score=0.2179
count(1, 103)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [5, 1]
new obj position(0.16666666666666666, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0123
Arm 1: Mean=0.2266, Std=0.0038 -> Score=0.2302
count(1, 104)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [6 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.8333333333333334, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0121
Arm 1: Mean=0.2271, Std=0.0038 -> Score=0.2262
count(1, 105)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.0, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.6666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.0, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0077
Arm 1: Mean=0.2273, Std=0.0038 -> Score=0.2306
count(1, 106)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.8333333333333334, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0021
Arm 1: Mean=0.2276, Std=0.0037 -> Score=0.2283
count(1, 107)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 8 0 6 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [0, 1]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.16666666666666666, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0060
Arm 1: Mean=0.2278, Std=0.0037 -> Score=0.2290
count(1, 108)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 6 6 0 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 0]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 4]
new obj position(0.3333333333333333, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0150
Arm 1: Mean=0.2281, Std=0.0037 -> Score=0.2265
count(1, 109)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 6 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 3]
new obj position(0.8333333333333334, 0.8333333333333334)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0139
Arm 1: Mean=0.2285, Std=0.0036 -> Score=0.2261
count(1, 110)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 8 8 6]
 [8 6 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=-0.0002
Arm 1: Mean=0.2290, Std=0.0036 -> Score=0.2240
count(1, 111)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 8 8 6]
 [8 4 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 4]
new obj position(0.16666666666666666, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.6666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [2, 4]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0128
Arm 1: Mean=0.2294, Std=0.0036 -> Score=0.2333
count(1, 112)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 8 8 6]
 [8 4 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [2, 1]
new obj position(0.6666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [4, 1]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.6666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0070
Arm 1: Mean=0.2299, Std=0.0036 -> Score=0.2332
count(1, 113)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 8 0 6 8 6]
 [8 4 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.8333333333333334, 0.6666666666666666)
target_shape: (6, 6) , new pos_values: [5, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 5]
new obj position(1.0, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.16666666666666666, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0133
Arm 1: Mean=0.2308, Std=0.0036 -> Score=0.2317
count(1, 114)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 6 0 6 8 6]
 [8 4 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 4]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [5, 5]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [0, 0]
new obj position(0.3333333333333333, 0.0)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0177
Arm 1: Mean=0.2316, Std=0.0035 -> Score=0.2302
count(1, 115)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[6 6 0 6 8 6]
 [8 6 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.0)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.16666666666666666, 0.0)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0209
Arm 1: Mean=0.2323, Std=0.0035 -> Score=0.2271
count(1, 116)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 6 0 6 8 6]
 [8 6 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [4, 5]
new obj position(0.5, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 2]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.5)
target_shape: (6, 6) , new pos_values: [2, 2]
new obj position(0.0, 0.16666666666666666)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0079
Arm 1: Mean=0.2329, Std=0.0035 -> Score=0.2314
count(1, 117)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 6 0 6 8 6]
 [8 6 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.16666666666666666, 0.16666666666666666)
target_shape: (6, 6) , new pos_values: [4, 3]
new obj position(0.5, 0.3333333333333333)
target_shape: (6, 6) , new pos_values: [4, 2]
new obj position(0.8333333333333334, 0.5)
target_shape: (6, 6) , new pos_values: [1, 2]
new obj position(0.3333333333333333, 0.3333333333333333)
Arm 0: Mean=0.0069, Std=0.0069 -> Score=0.0124
Arm 1: Mean=0.2335, Std=0.0035 -> Score=0.2363
count(1, 118)
input grid: [[8 6]
 [6 4]]
target grid: [[8 6 8 6 8 6]
 [6 4 6 4 6 4]
 [6 8 6 8 6 8]
 [4 6 4 6 4 6]
 [8 6 8 6 8 6]
 [6 4 6 4 6 4]]
'predicted_grid',[[0 6 0 6 8 6]
 [8 8 6 4 0 0]
 [4 4 6 6 0 0]
 [6 6 0 6 0 0]
 [0 6 4 8 6 0]
 [0 0 0 0 6 0]],<class 'numpy.ndarray'>
target_shape: (6, 6) , new pos_values: [1, 1]
new obj position(0.5, 0.16666666666666666)
