def find_objects(grid, connectivity=4):
    if not grid or not grid[0]:
        return []
    
    rows, cols = len(grid), len(grid[0])
    visited = [[False] * cols for _ in range(rows)]
    objects = []
    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # 4-connectivity
    if connectivity == 8:
        dirs += [(1, 1), (1, -1), (-1, 1), (-1, -1)]
    
    for r in range(rows):
        for c in range(cols):
            if not visited[r][c]:
                # Use starting pixel color as object color
                obj_color = grid[r][c]
                component = []
                queue = deque([(r, c)])
                visited[r][c] = True
                
                while queue:
                    cr, cc = queue.popleft()
                    component.append((cr, cc, grid[cr][cc]))
                    for dr, dc in dirs:
                        nr, nc = cr + dr, cc + dc
                        if (0 <= nr < rows and 0 <= nc < cols 
                            and not visited[nr][nc] 
                            and grid[nr][nc] == obj_color):  # Only same-color pixels
                            visited[nr][nc] = True
                            queue.append((nr, nc))
                
                if not component:  # Skip empty components
                    continue
                    
                # Extract bounding box
                min_r = min(x[0] for x in component)
                max_r = max(x[0] for x in component)
                min_c = min(x[1] for x in component)
                max_c = max(x[1] for x in component)
                
                # Create object grid with original colors
                obj_grid = [[None] * (max_c - min_c + 1) 
                           for _ in range(max_r - min_r + 1)]
                
                # Fill object and background
                for i in range(len(obj_grid)):
                    for j in range(len(obj_grid[0])):
                        abs_r, abs_c = min_r + i, min_c + j
                        if (abs_r, abs_c, grid[abs_r][abs_c]) in component:
                            obj_grid[i][j] = grid[abs_r][abs_c]
                        else:
                            obj_grid[i][j] = grid[abs_r][abs_c]  # Preserve background colors
                
                objects.append((obj_grid, min_r, min_c))
    return objects



###############################################################


# Feature extraction for neural network
def extract_features(objects, arrangement, output_grid):
    features = []
    H, W = len(output_grid), len(output_grid[0])
    
    # 1. Coverage ratio
    covered = sum(obj['size'][0] * obj['size'][1] for obj in objects)
    total_area = H * W
    features.append(covered / total_area)
    
    # 2. Positional variance
    avg_x = sum(pos[1] for _, pos in arrangement.items()) / len(arrangement)
    avg_y = sum(pos[0] for _, pos in arrangement.items()) / len(arrangement)
    var_x = sum((pos[1] - avg_x)**2 for _, pos in arrangement.items())
    var_y = sum((pos[0] - avg_y)**2 for _, pos in arrangement.items())
    features.append(var_x / (W**2))
    features.append(var_y / (H**2))
    
    # 3. Color distribution
    output_colors = set(np.array(output_grid).flatten())
    input_colors = set(obj['color'] for obj in objects)
    features.append(len(input_colors & output_colors) / len(output_colors | input_colors))
    
    # 4. Edge alignment
    edge_count = 0
    for _, pos in arrangement.items():
        if pos[0] == 0 or pos[0] == H-1 or pos[1] == 0 or pos[1] == W-1:
            edge_count += 1
    features.append(edge_count / len(arrangement))
    
    return features

# features = extract_features(objects, random_arrangement, output_grid)

def expand(self):
    if not self.objects:
        return
        
    obj = self.objects[0]
    H, W = len(self.output_grid), len(self.output_grid[0])
    
    # Generate candidate positions (grid-aligned)
    positions = []
    for r in range(H - obj['size'][0] + 1):
        for c in range(W - obj['size'][1] + 1):
            positions.append((r, c))
    
    # Random sampling for efficiency
    if len(positions) > 20:
        positions = random.sample(positions, 20)
        
    for pos in positions:
        new_objects = self.objects[1:]
        new_node = MCTSNode(new_objects, self.output_grid, 
                            self.background, self)
        new_node.arrangement = self.arrangement.copy()
        new_node.arrangement[id(obj)] = pos
        self.children.append(new_node)
    

# Neural network for arrangement scoring

    




    X_train, y_train = [], []
    for _ in range(100):
        random_arrangement = {}
        for obj in objects:
            r = random.randint(0, len(output_grid) - obj['size'][0])
            c = random.randint(0, len(output_grid[0]) - obj['size'][1])
            random_arrangement[id(obj)] = (r, c)
        

        input_tensor = torch.tensor(output_grid, dtype=torch.float32).unsqueeze(0).unsqueeze(0)  
        # shape: (batch_size=1, channels=1, height, width)
        features = model(input_tensor).detach().cpu().numpy().flatten()


        # Simple scoring: coverage of non-background areas
        coverage_score = 0
        for obj in objects:
            r, c = random_arrangement[id(obj)]
            for i in range(obj['size'][0]):
                for j in range(obj['size'][1]):
                    if output_grid[r+i][c+j] != background:
                        coverage_score += 1
        y_train.append(coverage_score / (len(output_grid)*len(output_grid[0])))
        X_train.append(features)

    
    # root.scorer.train(X_train, y_train)

# using prob based pos

        def select_action(self, input_grid, current_grid, ):
        self.policy.train()  # Optional

     
        input_tensor = self._preprocess_to_tensor(input_grid)     # "state" / input
        current_tensor = self._preprocess_to_tensor(current_grid) # "target" / current grid

       
        action_probs = self.policy([input_tensor, current_tensor])  # Shape: [num_actions]
        
        # Create a categorical distribution over actions
        dist = Categorical(action_probs)
        action_index = dist.sample()

        primitive_name = PRIMITIVE_NAMES[action_index.item()]
        new_grid = PRIMITIVE[primitive_name](current_grid.copy())  # Safe to copy before changing

        self.states.append(input_grid.copy(), current_grid.copy())
        self.actions.append(action_index.item())
        self.log_probs.append(dist.log_prob(action_index))

        return new_grid, action_index.item()
    

# def extract_region(grid, position, obj_shape):
#     grid = np.atleast_2d(grid)  # Ensure grid is at least 2D (converts 0D/1D to 2D)
#     r, c = position
#     h, w = obj_shape
    
#     # Handle cases where the region is out of bounds
#     grid_rows, grid_cols = grid.shape
#     if r + h > grid_rows or c + w > grid_cols:
#         raise ValueError("Requested region exceeds grid dimensions")

#     return grid[r:r+h, c:c+w].copy()
def get_object_position(node, obj):
    obj_id = id(obj)
    if obj_id in node.arrangement:
        return node.arrangement[obj_id]
    else:
        return None  
import numpy as np






def extract_region(grid, position, obj_shape):
    grid = np.atleast_2d(grid)
    r, c = position
    h, w = obj_shape

    grid_rows, grid_cols = grid.shape
    max_r = min(r + h, grid_rows)
    max_c = min(c + w, grid_cols)
    return grid[r:max_r, c:max_c]

class ArrangementScorer:
    def __init__(self):
        self.model = RandomForestRegressor(n_estimators=100, random_state=42)
        self.is_trained = False
        
    def train(self, X, y):

        self.model.fit(X, y)
        self.is_trained = True
        
    def predict(self, features):
        if not self.is_trained:
            return random.random()  # Random score if not trained
        return self.model.predict([features])[0]
    



def matrix_similarity(a, b):
    # Convert to binary masks
    mask_a = (a != 0).astype(int)
    mask_b = (b != 0).astype(int)

    # Make sure a is smaller or equal (crop from larger to smaller)
    if mask_a.shape[0] > mask_b.shape[0] or mask_a.shape[1] > mask_b.shape[1]:
        mask_a, mask_b = mask_b, mask_a  # swap

    h_a, w_a = mask_a.shape
    h_b, w_b = mask_b.shape

    max_iou = 0.0

    # Slide mask_a over mask_b
    for i in range(h_b - h_a + 1):
        for j in range(w_b - w_a + 1):
            window_b = mask_b[i:i+h_a, j:j+w_a]
            intersection = np.sum(mask_a & window_b)
            union = np.sum(mask_a | window_b)
            if union > 0:
                iou = intersection / union
                max_iou = max(max_iou, iou)

    return max_iou
a = np.array([
    [0, 0, 1],
    [0, 1, 0],
])

b = np.array([
    [0, 0, 1], 
    [0, 1, 0],
    [1, 0, 0]
])
similarity = matrix_similarity(a, b)
print(similarity)

def placement(output_grid, old_obj_info, new_obj_info, background=0):
    """
    Attempts to move/transform an object on the grid safely:
    - Checks if the new placement overlaps existing non-background pixels
    - Allows truncation at edges (partial placement)
    - If invalid (overlaps), returns None and does not modify grid
    - If valid, clears old position and draws new shape, then returns updated new_obj_info

    Parameters:
        output_grid (ndarray): The grid.
        old_obj_info (dict): Contains old "grid" and "position".
        new_obj_info (dict): Contains new "grid" and "position".
        background: Background value.

    Returns:
        new_obj_info if successful, None otherwise.
    """

    new_grid = new_obj_info["grid"]
    # print(new_grid)
    new_r, new_c = new_obj_info["position"]
    new_h, new_w = new_grid.shape

    # Determine overlapping region with output grid (for truncation)
    max_new_r = min(new_r + new_h, output_grid.shape[0])
    max_new_c = min(new_c + new_w, output_grid.shape[1])
    start_r = max(new_r, 0)
    start_c = max(new_c, 0)

    if max_new_r <= start_r or max_new_c <= start_c:
        # New object is completely out of grid (no overlap)
        # Placement is trivially valid, but nothing to draw
        # You might consider returning None or allowing empty placement
        pass  # allow

    else:
        # Crop the new object grid according to the overlap with output grid
        obj_crop_r_start = start_r - new_r  # >=0
        obj_crop_c_start = start_c - new_c  # >=0
        obj_crop_r_end = max_new_r - new_r
        obj_crop_c_end = max_new_c - new_c
        new_crop = new_grid[obj_crop_r_start:obj_crop_r_end, obj_crop_c_start:obj_crop_c_end]

        # Corresponding region on output_grid
        grid_region = output_grid[start_r:max_new_r, start_c:max_new_c]

        # Check overlap: if any pixel in new_crop != background AND grid_region != background, reject
        overlap_mask = (new_crop != background) & (grid_region != background)
        if np.any(overlap_mask):
            # return None  # Cannot place object here due to overlap
            print('overlap happend')
        return output_grid
    # No overlap detected, proceed to clear old object and draw new one

    # Clear old object (similar to before)
    old_grid = old_obj_info["grid"]
    old_r, old_c = old_obj_info["position"]
    old_h, old_w = old_grid.shape
    max_old_r = min(old_r + old_h, output_grid.shape[0])
    max_old_c = min(old_c + old_w, output_grid.shape[1])
    start_old_r = max(old_r, 0)
    start_old_c = max(old_c, 0)
    print('cleared')
    if max_old_r > start_old_r and max_old_c > start_old_c:
        old_crop_r_start = start_old_r - old_r
        old_crop_c_start = start_old_c - old_c
        old_crop_r_end = max_old_r - old_r
        old_crop_c_end = max_old_c - old_c
        old_crop = old_grid[old_crop_r_start:old_crop_r_end, old_crop_c_start:old_crop_c_end]
        region_to_clear = output_grid[start_old_r:max_old_r, start_old_c:max_old_c]
        output_grid[start_old_r:max_old_r, start_old_c:max_old_c] = np.where(
            old_crop != background,
            background,
            region_to_clear
        )

    # Draw new object (same as overlap check crop)
    if max_new_r > start_r and max_new_c > start_c:
        region_to_draw = output_grid[start_r:max_new_r, start_c:max_new_c]
        output_grid[start_r:max_new_r, start_c:max_new_c] = np.where(
            new_crop != background,
            new_crop,
            region_to_draw
        )

    # Update position in new_obj_info
    return output_grid

print('old output_grid',current_grid)
print('obj_info',obj_info['grid'])
print('pos',obj_info['position'])
print('new output_grid',new_grid)
